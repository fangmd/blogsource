---
title: java -- day8
date: 2015-12-28 21:18:12
tags: [java,day]
categories: java基础

---


# Day8
## 多态	
### 什么是多态	
>父类或者接口的引用指向子类或者实现类的对象
### 多态的体现	
### 对象的多态性	
## instanceof关键字
实例 instanceof 类或者是接口
若是类:表示实例是否是属于类的对象
若是接口:表示实例是否是实现类的对象	
## 内部类	
### 内部类概念	
### 局部内部类	
### 匿名内部类	
### 静态内部类	
### 成员内部类	
## 设计模式 23种
>总结出来用于解决一类问题最为有效的变成方法
>
>框架:做项目总结的经验:javaee:ssh, spring strus, hibernate.在作项目的时候把共通的代码抽取出来做成一个模板.
>
>框架与设计模式的关系:框架底层使用了多种设计模式,使用框架来做项目,就潜移默化的使用了很多设计模式.
## 单例设计模式	
>让一个类只能有一个实例对象.

饿汉式:

1. 设计一个本类类型的静态私有属性
2. 无参的构造方法私有化
3. 对外暴露一个获取本类对象的方法.

懒汉式：

①设计一个本类类型的静态私有属性

②无参的构造方法要私有化

③对外暴露一个获取本类对象的静态方法
  判断属性值是否为null，不为null，就new
  否则，就直接返回(这里的代码注意简化if没有else)
### 工厂设计模式
>构建一个对象的时候,不是手动new一个对象,而是通过一个实例工厂中工具方法获得的.

自己总结的特点:
工厂类相当于是工具类,类中的方法定义成静态方法,用类.方法(实参列表)直接调用,方法的作用是构造对象.

例子:花店作为工厂构建是对花对象,花是独立类
### 模板设计模式
设计一个个方法时,将固定部分的设计成为一个模板,将动态的部分酬取出来,封装成一个抽象的方法,然后具体的子类去重写抽象父类的方法.

自己的总结:

模板类是一个抽象类,其中的抽象方法是变化的代码由子类来实现( `System.currentTimeMillis()` ).有一个final方法来调用抽象方法(当子类使用这个方法时即是调用变化的代码)----------所以一个模板类中一般至少有两个方法,一个会不变的方法(final)一个是抽象方法.
###	
## 接口回调	
### 接口回调的原理	
### 接口回调的简单使用	
## 内部类的应用场景	
### 实例内部类应用场景——Button按钮事件监听器
-->成员内部类：与外部类的成员属性和成员方法平级的类。

语法：访问权限修饰符 class 外部类类名{
            //外部类的属性和方法

            //成员内部类
            访问权限修饰符 class 内部类类名{
               //属性和方法
            }      
      }

特点:

1. 与外类的属性和方法平级;
2. 外部类的属性和方法属于对象,所以与之类似的,成员内部类属于外部类对象.-->成员内部类的构建方式:外部类.内部类 实例名 = 外部类对象.new 内部类的构造器
3. 如何在成员内部类方法中访问同名的变量（外部类的属性、内部类的属性，内部类方法中的局部变量）

    外部类的属性--》  访问方式：外部类类名.this.属性
   
     内部类的属性--》  访问方式：this.属性
   
      内部类方法中的局部变量--》访问方式：局部变量名
      
4. 成员内部类可以使 private,default,protected,public等等访问权限修饰符来修饰。
5. 包含了成员内部类的源码，编译时会生成的字节码文件的个数与class的个数相同

     注意：成员内部类生成的字节码文件的名字:外部类    类名$内部类类名.class    如：Outer2$Inner.class   

自己的总结:
对老师代码的分析:定义了一个接口,接口中抽象类为clickApp. 在测试类中定义成员内部类,这些类实现接口并且重写了抽象方法,在外部类的方法中可以通过`new 内部类名()` 或者`this.new 内部类名()`来直接创建内部类对象 

-->成员内部类在真实android项目中的适用场景：

实例内部类应用场景——Button按钮事件监听器	
需求：用户在手机上安装了不同的应用（qq，支付宝），点击app启动使用的情形。

分析：

1、设计一个监听器接口，用来监听用户点击某个应用的事件

2、在测试类中，准备几个成员内部类（对应的app类）

3、main方法：xxx
      
      
      
      
    -------------------------------------  
      
      
      
      
      
      
### 匿名内部类应用场景——Button按钮事件监听器	

---》匿名内部类：书写在外部类中，与外部类的属性或方法平级的没有名字的内部类；
                 或者是：书写在外部类的方法体中，与方法中局部变量平级的没有名字的内部类。
分成：
①成员匿名内部类
语法：访问权限修饰符 class 外部类类名{
            //外部类的属性和方法

	    //接口类型的属性
            接口 引用 = new 接口(){
                 //匿名内部类的类体
            };     
      }


②局部匿名内部类

语法：访问权限修饰符 class 外部类类名{
            //外部类的属性和方法

	    访问权限修饰符 返回值类型 方法名（形参列表）{            

	    	//接口类型的局部变量（使用匿名内部类进行初始化）
           	 接口 引用 = new 接口(){
               	   //匿名内部类的类体	
                 };   
            }  
      }




匿名内部类的特点：

1、匿名内部类类体中，可以书写任意的属性和方法，但是：建议只书写实现接口中的方法，
  书写别的方法和属性通过多态的方式是调用不了的，就成为了“垃圾代码”。除非：匿名
  内部类中的属性和方法供实现了接口中的方法来调用。
  
2、匿名内部类只能使用一次。（类比：现实中的一次性筷子）

3、包含了匿名内部类的外部类，编译后，生成的字节码文件的个数 = class的个数 + 匿名内部类的个数
  匿名内部类编译后的字节码文件名：外部类类名$编号.class ( 编号从1开始) 如：Outer$1.class

4、局部匿名内部类访问与之平级的局部变量，那么该局部变量必须声明为final。


匿名内部类拓展： 匿名内部类中的接口，从语法的角度而言，也可以是普通类和抽象类。

--》匿名内部类的适用场景：
匿名内部类应用场景——Button按钮事件监听器

实现方式：

①匿名成员内部类来实现
②匿名局部内部类来实现
### 局部内部类应用场景——Button按钮事件监听器

-->局部内部类：与外部类中成员方法中的局部变量平级的内部类。
语法：访问权限修饰符 class 外部类类名{
            //外部类的属性

            访问权限修饰符 返回值类型 方法名（形式参数列表）{
                //局部变量

            	//局部内部类
            	class 内部类类名{
              	 //属性和方法
            	} 
	    }	     
      }

特点：
1、与外部类方法体中的局部变量同一个级别，且使用方式类似。
2、局部变量只能使用final来修饰，不能使用可见性修饰符来修饰，据此，推理出：
   局部内部类也是如此。
3、局部内部类访问与之平级的局部变量，该局部变量必须是局部常量
4、如何构建局部内部类的对象
   与局部变量类似，局部变量的使用范围仅限于其所在的方法体或者代码块
    同理，局部内部类只能在其所在的方法体中构建对象。
   --》如何调用局部内部类中的方法
   **不能直接调用**，只能间接调用（调用局部内部类所在的方法,这个方法中实现了类的实例化和类使用类中的方法）
5、包含了局部内部类的外部类，编译时，有几个class就会生成几个字节码文件
   注意：局部内部类的字节码文件名是：外部类类名.序号+内部类类名.class 如：Outer.1Inner.class


-->应用场景：10.6.3局部内部类应用场景——Button按钮事件监听器
需求：用户在手机上安装了不同的应用（qq，支付宝），点击app启动使用的情形。
分析：
1、设计一个监听器接口，用来监听用户点击某个应用的事件
2、在测试类中，准备几个方法，每个方法表示用户安装、启动并使用app应用
3、main方法：xxx



### 静态内部类应用场景——Builder构建器
---》静态内部类：与外部类的静态属性和静态方法平级的内部类。

语法：访问权限修饰符 class 外部类类名{
            //外部类的属性和方法

            //外部类的静态属性和静态方法

            //静态内部类
            访问权限修饰符 static class 内部类类名{
               //属性和方法
            }      
      }
      
特点：

1.  静态内部类与静态属性和静态方法使用方式类似
2. 如何构建静态内部类对象
   因为静态内部类与外部类中的静态属性和静态方法平级，使用方式也类似，据此
   外部类调用外部类中的静态方法：外部类类名.静态方法（实参）
   -->推导：外部类类名.静态内部类类名 实例名 = new 外部类.内部类构造方法；
3. 静态内部类中的普通方法和静态方法只能访问外部类中的静态属性和静态方法，不能访问
   外部类的普通属性和普通方法。(特别指出：内部类中静态方法可以访问外部类的构造方法，不能访问普通方法)
4. 如何调用静态内部类中的静态方法呢？
  语法：外部类.静态内部类.静态方法(实际参数列表);    (**静态内部类中能不能有普通方法**)
5. 包含了静态内部类的外部类，编译时，字节码文件的个数与class相同，静态内部类编译后
  的字节码文件名格式为：外部类$静态内部类类名.class

---》静态内部类的适用场景：

1）静态内部类应用场景——Builder构建器      ** 链式编程??**

分析：
设计一个包含了静态内部类的外部类，静态内部类中有一个构建外部类对象的静态方法，
      外部类中的setter访问器设计返回值类型为外部类本身。（Builder构建器：本质：通过
      静态内部类构建外部类对象）

注意：api中，使用了builder构建器，如：字符串构建器类StringBuffer,StringBuilder

2）静态内部类应用场景——Button按钮事件监听器
需求：用户在手机上安装了不同的应用（qq，支付宝），点击app启动使用的情形。
**为什么接口的引用指向实现接口的类时,接口引用不用向下转型就能直接使用实现类的方法;;;;;;;;;继承关系的类是否可以(是否抽象??还是和是否重写有关????)**
分析：
1、设计一个监听器接口，用来监听用户点击某个应用的事件
2、在测试类中，准备几个静态内部类，让每个静态内部类实现监听器接口
3、main方法：xxx	
